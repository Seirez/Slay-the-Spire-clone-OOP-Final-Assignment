import java.util.*;

/*
Slay the Spire
1. Bisa memilih character
2. Bisa menggunakan card
*/

// Abstract untuk status effect (buff/debuff)
abstract class Status {
    // inisialisasi
    String name;
    int Duration;
}

// Abstract untuk card
abstract class Card{
    // inisialisasi
    public String CardName;
    int Damage;
	int Heal;
	int Block;
}

// Abstract untuk history(showcase polymorphism)
abstract class History {
    // Method abstract = harus dimiliki sub-class
    abstract History show(String name,int hp);
}

// Class character
class Character{
    // inisialisasi
    private String CharName;
    private int Health;
    int Block;
    
    // Reset block
    public int BlockReset(){
        int Block=0;
        return Block;
    }

    // Mengganti/memberi nama
    void setCharName(String Name){
        this.CharName = Name;
    }
    // Mengambil nama
    String getCharName(){
        return this.CharName;
    }

    // Mengganti/memberi hp
    void setHealth(int hp){
        this.Health = hp;
    }
    // Mengambil hp
    int getHealth(){
        return this.Health;
    }
    
    // Menghitung jumlah heal yang diterima
    public int Heal(int hp,int heal){
        hp+=heal;
        return hp;
    }

    // Menghitung jumlah damage yang diterima
    public int Damage(int hp,int dmg,int block){
        if (block==0){
            hp-=dmg;
        }
        else{
            block-=dmg;
        }
        return hp;
    }

    // Memperlihatkan deskripsi character
    public void ShowDesc(){
        System.out.println("Name : "+this.getCharName());
        System.out.println("HP : "+this.getHealth());
    }
}

/*
class Encounter{
	1. Random encounter
		a. Random event
	2. Enemy encounter
		a. Normal
		b. Boss
		c. Elite
	3. Peaceful encounter
		a. Trader
		b. Chest
		c. Campfire
	4. Events
}
*/

// Class relic
class Relic{
    // inisialisasi
	private String RName;

    // Mengganti/memberi nama relic
    void setRName(String name){
        this.RName = name;
    }
    // Mengambil nama relic
    String getRName(){
        return this.RName;
    }
}

// Class potion
class Potion{
    // inisialisasi
	private String PName;
  	int Slot=3;

    // Mengganti/memberi nama potion
    void setPName(String name){
        this.PName = name;
    }
    // Mengambil nama potion
    String getPName(){
        return this.PName;
    }
}

// Class buff inherit dari Status
class Buff extends Status{
    
}

// Class buff inherit Status
class Debuff extends Status{
    
}

// Class hand untuk kartu yang dapat digunakan
// class Hand{

// }

// Class turn
class Turn{
    // Class energy
    public class Energy{
        // inisialisasi
        int Energy;
        int MaxEnergy;

        // Method energy bertambah
        public int Increase(int Energy,int Cost){
            Energy=Energy+Cost;
            return Energy;
        }
        // Method energy berkurang
        public int Reduce(int Energy,int Cost){
            Energy=Energy-Cost;
            return Energy;
        }
        // Method energy reset
        public int Reset(int Max){
            Energy=Max;
            return Energy;
        }
    }
}

// Class currency
class Currency{
    // inisialisasi
    int money;

    // Menghitung pembelian
    public int Buy(int money, int price){
        money = money-price;
        return money;
    }
    // Menghitung penjualan
    public int Sell(int money, int price){
        money = money+price;
        return money;
    }
}

// Class HealHistory inherit History
class HealHistory extends History {
    public History show(String name,int hp) {
        System.out.println(name+"healed for"+hp);
        return null;
    }
}

// Class DamageHistory inherit History
class DamageHistory extends History {
    public History show(String name,int damage) {
        System.out.println(name+" received "+damage+" damage");
        return null;
    }
}

// Main class (Runner)
class SlayTheSpire {
	// Method konfirmasi
	boolean Confirm(){
	    // inisialisasi
	    String temp;

	    // Meminta keyakinan dengan scanner
	    System.out.println("Are you sure?(y/n)");
	    temp = in.nextLine;
	    if (temp=='y'||temp=='Y'){
		return true;
	    }
	    else{
		return false;
	    }
	}
	
    public static void main(String[] args) {
        // inisialisasi
        // Scanner
        Scanner in = new Scanner(System.in);

        //Characters
        Character Ironclad = new Character();
        Ironclad.setCharName("Ironclad");
        Ironclad.setHealth(80);
        
        Character Silent = new Character();
        Silent.setCharName("Silent");
        Silent.setHealth(70);
        
        //Relics
        Relic R1 = new Relic();
        R1.setRName("Burning Blood");

        Relic R2 = new Relic();
        R2.setRName("Ring of The Snake");
        
        //Buffs
        Buff B1 = new Buff();
        B1.name = "Strength";
        
        Buff B2 = new Buff();
        B2.name = "Dexterity";
        
        Buff B3 = new Buff();
        B3.name = "Regen";
        
        //Debuffs
        Debuff DB1 = new Debuff();
        DB1.name = "Vulnerable";
        
        Debuff DB2 = new Debuff();
        DB2.name = "Frail";
        
        Debuff DB3 = new Debuff();
        DB3.name = "Weak";

        // Menu dalam loop
        for(int i = 0; i<1;){
            // Menu pilihan
            System.out.print("\n");
            System.out.println("-----------------------------");
            System.out.println("1. Pilih Character");
            //System.out.println(". ");
            System.out.println("3. Berhenti");
            System.out.println("-----------------------------");

            // Pilihan diminta dan diterima dengan inputan scanner
            System.out.println("Pilih:");
            int key1 = in.nextInt();
            System.out.print("\n");

            // Pilihan dengan menggunakan switch
            switch (key1) {
                case 1:
                System.out.println("1. "+Ironclad.getCharName());
                System.out.println("2. "+Silent.getCharName());
                System.out.print("\n");
                System.out.println("Pilih:");
                int key2 = in.nextInt();
                switch (key2) {
                    case 1:
                        Ironclad.ShowDesc();
                        break;

                    case 2:
                        Silent.ShowDesc();
                        break;
                        
                    default:
                        System.out.println("Unknown Command");
                        break;
                    }
                    break;

                case 2:
                    System.out.println();
                    break;

                case 3:
                    i++;
                    break;

                default:
                    System.out.println("Unknown Command");
                    break;
            }
        }
    }
}
